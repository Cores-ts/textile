// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: buckets.proto

package buckets_pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ArchiveStatusReply_Status int32

const (
	ArchiveStatusReply_Executing ArchiveStatusReply_Status = 0
	ArchiveStatusReply_Failed    ArchiveStatusReply_Status = 1
	ArchiveStatusReply_Done      ArchiveStatusReply_Status = 2
	ArchiveStatusReply_Canceled  ArchiveStatusReply_Status = 3
)

// Enum value maps for ArchiveStatusReply_Status.
var (
	ArchiveStatusReply_Status_name = map[int32]string{
		0: "Executing",
		1: "Failed",
		2: "Done",
		3: "Canceled",
	}
	ArchiveStatusReply_Status_value = map[string]int32{
		"Executing": 0,
		"Failed":    1,
		"Done":      2,
		"Canceled":  3,
	}
)

func (x ArchiveStatusReply_Status) Enum() *ArchiveStatusReply_Status {
	p := new(ArchiveStatusReply_Status)
	*p = x
	return p
}

func (x ArchiveStatusReply_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchiveStatusReply_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_buckets_proto_enumTypes[0].Descriptor()
}

func (ArchiveStatusReply_Status) Type() protoreflect.EnumType {
	return &file_buckets_proto_enumTypes[0]
}

func (x ArchiveStatusReply_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchiveStatusReply_Status.Descriptor instead.
func (ArchiveStatusReply_Status) EnumDescriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{29, 0}
}

type Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path      string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	CreatedAt int64  `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Thread    string `protobuf:"bytes,6,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *Root) Reset() {
	*x = Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{0}
}

func (x *Root) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Root) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Root) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Root) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Root) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Root) GetThread() string {
	if x != nil {
		return x.Thread
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{1}
}

type ListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roots []*Root `protobuf:"bytes,1,rep,name=roots,proto3" json:"roots,omitempty"`
	Size  int64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListReply) Reset() {
	*x = ListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReply) ProtoMessage() {}

func (x *ListReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReply.ProtoReflect.Descriptor instead.
func (*ListReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{2}
}

func (x *ListReply) GetRoots() []*Root {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *ListReply) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BootstrapCid string `protobuf:"bytes,2,opt,name=bootstrapCid,proto3" json:"bootstrapCid,omitempty"`
	Private      bool   `protobuf:"varint,3,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{3}
}

func (x *InitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InitRequest) GetBootstrapCid() string {
	if x != nil {
		return x.BootstrapCid
	}
	return ""
}

func (x *InitRequest) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

type InitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root    *Root       `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Links   *LinksReply `protobuf:"bytes,2,opt,name=links,proto3" json:"links,omitempty"`
	Seed    []byte      `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
	SeedCid string      `protobuf:"bytes,4,opt,name=seedCid,proto3" json:"seedCid,omitempty"`
}

func (x *InitReply) Reset() {
	*x = InitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitReply) ProtoMessage() {}

func (x *InitReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitReply.ProtoReflect.Descriptor instead.
func (*InitReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{4}
}

func (x *InitReply) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *InitReply) GetLinks() *LinksReply {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *InitReply) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *InitReply) GetSeedCid() string {
	if x != nil {
		return x.SeedCid
	}
	return ""
}

type RootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RootRequest) Reset() {
	*x = RootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootRequest) ProtoMessage() {}

func (x *RootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootRequest.ProtoReflect.Descriptor instead.
func (*RootRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{5}
}

func (x *RootRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RootReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root *Root `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *RootReply) Reset() {
	*x = RootReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootReply) ProtoMessage() {}

func (x *RootReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootReply.ProtoReflect.Descriptor instead.
func (*RootReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{6}
}

func (x *RootReply) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

type LinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LinksRequest) Reset() {
	*x = LinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinksRequest) ProtoMessage() {}

func (x *LinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinksRequest.ProtoReflect.Descriptor instead.
func (*LinksRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{7}
}

func (x *LinksRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type LinksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL  string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	WWW  string `protobuf:"bytes,2,opt,name=WWW,proto3" json:"WWW,omitempty"`
	IPNS string `protobuf:"bytes,3,opt,name=IPNS,proto3" json:"IPNS,omitempty"`
}

func (x *LinksReply) Reset() {
	*x = LinksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinksReply) ProtoMessage() {}

func (x *LinksReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinksReply.ProtoReflect.Descriptor instead.
func (*LinksReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{8}
}

func (x *LinksReply) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *LinksReply) GetWWW() string {
	if x != nil {
		return x.WWW
	}
	return ""
}

func (x *LinksReply) GetIPNS() string {
	if x != nil {
		return x.IPNS
	}
	return ""
}

type ListPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ListPathRequest) Reset() {
	*x = ListPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPathRequest) ProtoMessage() {}

func (x *ListPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPathRequest.ProtoReflect.Descriptor instead.
func (*ListPathRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{9}
}

func (x *ListPathRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListPathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *ListPathItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Root *Root         `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *ListPathReply) Reset() {
	*x = ListPathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPathReply) ProtoMessage() {}

func (x *ListPathReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPathReply.ProtoReflect.Descriptor instead.
func (*ListPathReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{10}
}

func (x *ListPathReply) GetItem() *ListPathItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ListPathReply) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

type ListPathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid   string          `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Name  string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path  string          `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Size  int64           `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	IsDir bool            `protobuf:"varint,5,opt,name=isDir,proto3" json:"isDir,omitempty"`
	Items []*ListPathItem `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListPathItem) Reset() {
	*x = ListPathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPathItem) ProtoMessage() {}

func (x *ListPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPathItem.ProtoReflect.Descriptor instead.
func (*ListPathItem) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{11}
}

func (x *ListPathItem) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ListPathItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPathItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ListPathItem) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListPathItem) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *ListPathItem) GetItems() []*ListPathItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListIpfsPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ListIpfsPathRequest) Reset() {
	*x = ListIpfsPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIpfsPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIpfsPathRequest) ProtoMessage() {}

func (x *ListIpfsPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIpfsPathRequest.ProtoReflect.Descriptor instead.
func (*ListIpfsPathRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{12}
}

func (x *ListIpfsPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListIpfsPathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *ListPathItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListIpfsPathReply) Reset() {
	*x = ListIpfsPathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIpfsPathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIpfsPathReply) ProtoMessage() {}

func (x *ListIpfsPathReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIpfsPathReply.ProtoReflect.Descriptor instead.
func (*ListIpfsPathReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{13}
}

func (x *ListIpfsPathReply) GetItem() *ListPathItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type PushPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*PushPathRequest_Header_
	//	*PushPathRequest_Chunk
	Payload isPushPathRequest_Payload `protobuf_oneof:"payload"`
}

func (x *PushPathRequest) Reset() {
	*x = PushPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPathRequest) ProtoMessage() {}

func (x *PushPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPathRequest.ProtoReflect.Descriptor instead.
func (*PushPathRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{14}
}

func (m *PushPathRequest) GetPayload() isPushPathRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PushPathRequest) GetHeader() *PushPathRequest_Header {
	if x, ok := x.GetPayload().(*PushPathRequest_Header_); ok {
		return x.Header
	}
	return nil
}

func (x *PushPathRequest) GetChunk() []byte {
	if x, ok := x.GetPayload().(*PushPathRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isPushPathRequest_Payload interface {
	isPushPathRequest_Payload()
}

type PushPathRequest_Header_ struct {
	Header *PushPathRequest_Header `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type PushPathRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*PushPathRequest_Header_) isPushPathRequest_Payload() {}

func (*PushPathRequest_Chunk) isPushPathRequest_Payload() {}

type PushPathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*PushPathReply_Event_
	//	*PushPathReply_Error
	Payload isPushPathReply_Payload `protobuf_oneof:"payload"`
}

func (x *PushPathReply) Reset() {
	*x = PushPathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushPathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPathReply) ProtoMessage() {}

func (x *PushPathReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPathReply.ProtoReflect.Descriptor instead.
func (*PushPathReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{15}
}

func (m *PushPathReply) GetPayload() isPushPathReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PushPathReply) GetEvent() *PushPathReply_Event {
	if x, ok := x.GetPayload().(*PushPathReply_Event_); ok {
		return x.Event
	}
	return nil
}

func (x *PushPathReply) GetError() string {
	if x, ok := x.GetPayload().(*PushPathReply_Error); ok {
		return x.Error
	}
	return ""
}

type isPushPathReply_Payload interface {
	isPushPathReply_Payload()
}

type PushPathReply_Event_ struct {
	Event *PushPathReply_Event `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type PushPathReply_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*PushPathReply_Event_) isPushPathReply_Payload() {}

func (*PushPathReply_Error) isPushPathReply_Payload() {}

type PullPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PullPathRequest) Reset() {
	*x = PullPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPathRequest) ProtoMessage() {}

func (x *PullPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPathRequest.ProtoReflect.Descriptor instead.
func (*PullPathRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{16}
}

func (x *PullPathRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PullPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type PullPathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *PullPathReply) Reset() {
	*x = PullPathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPathReply) ProtoMessage() {}

func (x *PullPathReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPathReply.ProtoReflect.Descriptor instead.
func (*PullPathReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{17}
}

func (x *PullPathReply) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type PullIpfsPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PullIpfsPathRequest) Reset() {
	*x = PullIpfsPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullIpfsPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullIpfsPathRequest) ProtoMessage() {}

func (x *PullIpfsPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullIpfsPathRequest.ProtoReflect.Descriptor instead.
func (*PullIpfsPathRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{18}
}

func (x *PullIpfsPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type PullIpfsPathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *PullIpfsPathReply) Reset() {
	*x = PullIpfsPathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullIpfsPathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullIpfsPathReply) ProtoMessage() {}

func (x *PullIpfsPathReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullIpfsPathReply.ProtoReflect.Descriptor instead.
func (*PullIpfsPathReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{19}
}

func (x *PullIpfsPathReply) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type SetPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Cid  string `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *SetPathRequest) Reset() {
	*x = SetPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPathRequest) ProtoMessage() {}

func (x *SetPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPathRequest.ProtoReflect.Descriptor instead.
func (*SetPathRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{20}
}

func (x *SetPathRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetPathRequest) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

type SetPathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPathReply) Reset() {
	*x = SetPathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPathReply) ProtoMessage() {}

func (x *SetPathReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPathReply.ProtoReflect.Descriptor instead.
func (*SetPathReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{21}
}

type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RemoveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveReply) Reset() {
	*x = RemoveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReply) ProtoMessage() {}

func (x *RemoveReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReply.ProtoReflect.Descriptor instead.
func (*RemoveReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{23}
}

type RemovePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Root string `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *RemovePathRequest) Reset() {
	*x = RemovePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePathRequest) ProtoMessage() {}

func (x *RemovePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePathRequest.ProtoReflect.Descriptor instead.
func (*RemovePathRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{24}
}

func (x *RemovePathRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RemovePathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemovePathRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type RemovePathReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root *Root `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *RemovePathReply) Reset() {
	*x = RemovePathReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePathReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePathReply) ProtoMessage() {}

func (x *RemovePathReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePathReply.ProtoReflect.Descriptor instead.
func (*RemovePathReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{25}
}

func (x *RemovePathReply) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

type ArchiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ArchiveRequest) Reset() {
	*x = ArchiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRequest) ProtoMessage() {}

func (x *ArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{26}
}

func (x *ArchiveRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ArchiveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveReply) Reset() {
	*x = ArchiveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveReply) ProtoMessage() {}

func (x *ArchiveReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveReply.ProtoReflect.Descriptor instead.
func (*ArchiveReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{27}
}

type ArchiveStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ArchiveStatusRequest) Reset() {
	*x = ArchiveStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveStatusRequest) ProtoMessage() {}

func (x *ArchiveStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveStatusRequest.ProtoReflect.Descriptor instead.
func (*ArchiveStatusRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{28}
}

func (x *ArchiveStatusRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ArchiveStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string                    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Status    ArchiveStatusReply_Status `protobuf:"varint,2,opt,name=status,proto3,enum=buckets.pb.ArchiveStatusReply_Status" json:"status,omitempty"`
	FailedMsg string                    `protobuf:"bytes,3,opt,name=failedMsg,proto3" json:"failedMsg,omitempty"`
}

func (x *ArchiveStatusReply) Reset() {
	*x = ArchiveStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveStatusReply) ProtoMessage() {}

func (x *ArchiveStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveStatusReply.ProtoReflect.Descriptor instead.
func (*ArchiveStatusReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{29}
}

func (x *ArchiveStatusReply) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ArchiveStatusReply) GetStatus() ArchiveStatusReply_Status {
	if x != nil {
		return x.Status
	}
	return ArchiveStatusReply_Executing
}

func (x *ArchiveStatusReply) GetFailedMsg() string {
	if x != nil {
		return x.FailedMsg
	}
	return ""
}

type ArchiveInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ArchiveInfoRequest) Reset() {
	*x = ArchiveInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveInfoRequest) ProtoMessage() {}

func (x *ArchiveInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveInfoRequest.ProtoReflect.Descriptor instead.
func (*ArchiveInfoRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{30}
}

func (x *ArchiveInfoRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ArchiveInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Archive *ArchiveInfoReply_Archive `protobuf:"bytes,2,opt,name=archive,proto3" json:"archive,omitempty"`
}

func (x *ArchiveInfoReply) Reset() {
	*x = ArchiveInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveInfoReply) ProtoMessage() {}

func (x *ArchiveInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveInfoReply.ProtoReflect.Descriptor instead.
func (*ArchiveInfoReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{31}
}

func (x *ArchiveInfoReply) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ArchiveInfoReply) GetArchive() *ArchiveInfoReply_Archive {
	if x != nil {
		return x.Archive
	}
	return nil
}

type ArchiveWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ArchiveWatchRequest) Reset() {
	*x = ArchiveWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWatchRequest) ProtoMessage() {}

func (x *ArchiveWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWatchRequest.ProtoReflect.Descriptor instead.
func (*ArchiveWatchRequest) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{32}
}

func (x *ArchiveWatchRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ArchiveWatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ArchiveWatchReply) Reset() {
	*x = ArchiveWatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveWatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWatchReply) ProtoMessage() {}

func (x *ArchiveWatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWatchReply.ProtoReflect.Descriptor instead.
func (*ArchiveWatchReply) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{33}
}

func (x *ArchiveWatchReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PushPathRequest_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Root string `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *PushPathRequest_Header) Reset() {
	*x = PushPathRequest_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushPathRequest_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPathRequest_Header) ProtoMessage() {}

func (x *PushPathRequest_Header) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPathRequest_Header.ProtoReflect.Descriptor instead.
func (*PushPathRequest_Header) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{14, 0}
}

func (x *PushPathRequest_Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PushPathRequest_Header) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PushPathRequest_Header) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type PushPathReply_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Bytes int64  `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Size  string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Root  *Root  `protobuf:"bytes,5,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *PushPathReply_Event) Reset() {
	*x = PushPathReply_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushPathReply_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPathReply_Event) ProtoMessage() {}

func (x *PushPathReply_Event) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPathReply_Event.ProtoReflect.Descriptor instead.
func (*PushPathReply_Event) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{15, 0}
}

func (x *PushPathReply_Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PushPathReply_Event) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PushPathReply_Event) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *PushPathReply_Event) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *PushPathReply_Event) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

type ArchiveInfoReply_Archive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid   string                           `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Deals []*ArchiveInfoReply_Archive_Deal `protobuf:"bytes,2,rep,name=deals,proto3" json:"deals,omitempty"`
}

func (x *ArchiveInfoReply_Archive) Reset() {
	*x = ArchiveInfoReply_Archive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveInfoReply_Archive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveInfoReply_Archive) ProtoMessage() {}

func (x *ArchiveInfoReply_Archive) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveInfoReply_Archive.ProtoReflect.Descriptor instead.
func (*ArchiveInfoReply_Archive) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{31, 0}
}

func (x *ArchiveInfoReply_Archive) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ArchiveInfoReply_Archive) GetDeals() []*ArchiveInfoReply_Archive_Deal {
	if x != nil {
		return x.Deals
	}
	return nil
}

type ArchiveInfoReply_Archive_Deal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalCid string `protobuf:"bytes,1,opt,name=proposalCid,proto3" json:"proposalCid,omitempty"`
	Miner       string `protobuf:"bytes,2,opt,name=miner,proto3" json:"miner,omitempty"`
}

func (x *ArchiveInfoReply_Archive_Deal) Reset() {
	*x = ArchiveInfoReply_Archive_Deal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buckets_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveInfoReply_Archive_Deal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveInfoReply_Archive_Deal) ProtoMessage() {}

func (x *ArchiveInfoReply_Archive_Deal) ProtoReflect() protoreflect.Message {
	mi := &file_buckets_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveInfoReply_Archive_Deal.ProtoReflect.Descriptor instead.
func (*ArchiveInfoReply_Archive_Deal) Descriptor() ([]byte, []int) {
	return file_buckets_proto_rawDescGZIP(), []int{31, 0, 0}
}

func (x *ArchiveInfoReply_Archive_Deal) GetProposalCid() string {
	if x != nil {
		return x.ProposalCid
	}
	return ""
}

func (x *ArchiveInfoReply_Archive_Deal) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

var File_buckets_proto protoreflect.FileDescriptor

var file_buckets_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x22, 0x94, 0x01, 0x0a, 0x04,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x47, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5f, 0x0a, 0x0b, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x09,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12,
	0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x65, 0x64, 0x43, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x65, 0x64, 0x43, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0b, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x31, 0x0a, 0x09,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22,
	0x20, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x44, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x4c, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x57, 0x57, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x57, 0x57, 0x57, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x4e, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x50, 0x4e, 0x53, 0x22, 0x37, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x63, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x41, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x66,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x73,
	0x68, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0x42, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xec, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0x7f, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x37, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x25, 0x0a, 0x0d, 0x50, 0x75, 0x6c,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x29, 0x0a, 0x13, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x11, 0x50,
	0x75, 0x6c, 0x6c, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x48, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64,
	0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x21, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x4d, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x22, 0x37, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x22, 0x0a, 0x0e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x0e,
	0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28,
	0x0a, 0x14, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x3b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x26, 0x0a, 0x12, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x10, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x07, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x64, 0x65, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x65,
	0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x04, 0x44, 0x65, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x43, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x13, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x25, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xf8, 0x08, 0x0a, 0x03, 0x41, 0x50,
	0x49, 0x12, 0x38, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x04, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x17, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1b, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x46,
	0x0a, 0x08, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0c, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x70,
	0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x70, 0x66, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x07, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x38, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x69,
	0x6c, 0x65, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x42,
	0x0e, 0x54, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50,
	0x01, 0xa2, 0x02, 0x0a, 0x54, 0x54, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_buckets_proto_rawDescOnce sync.Once
	file_buckets_proto_rawDescData = file_buckets_proto_rawDesc
)

func file_buckets_proto_rawDescGZIP() []byte {
	file_buckets_proto_rawDescOnce.Do(func() {
		file_buckets_proto_rawDescData = protoimpl.X.CompressGZIP(file_buckets_proto_rawDescData)
	})
	return file_buckets_proto_rawDescData
}

var file_buckets_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_buckets_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_buckets_proto_goTypes = []interface{}{
	(ArchiveStatusReply_Status)(0),        // 0: buckets.pb.ArchiveStatusReply.Status
	(*Root)(nil),                          // 1: buckets.pb.Root
	(*ListRequest)(nil),                   // 2: buckets.pb.ListRequest
	(*ListReply)(nil),                     // 3: buckets.pb.ListReply
	(*InitRequest)(nil),                   // 4: buckets.pb.InitRequest
	(*InitReply)(nil),                     // 5: buckets.pb.InitReply
	(*RootRequest)(nil),                   // 6: buckets.pb.RootRequest
	(*RootReply)(nil),                     // 7: buckets.pb.RootReply
	(*LinksRequest)(nil),                  // 8: buckets.pb.LinksRequest
	(*LinksReply)(nil),                    // 9: buckets.pb.LinksReply
	(*ListPathRequest)(nil),               // 10: buckets.pb.ListPathRequest
	(*ListPathReply)(nil),                 // 11: buckets.pb.ListPathReply
	(*ListPathItem)(nil),                  // 12: buckets.pb.ListPathItem
	(*ListIpfsPathRequest)(nil),           // 13: buckets.pb.ListIpfsPathRequest
	(*ListIpfsPathReply)(nil),             // 14: buckets.pb.ListIpfsPathReply
	(*PushPathRequest)(nil),               // 15: buckets.pb.PushPathRequest
	(*PushPathReply)(nil),                 // 16: buckets.pb.PushPathReply
	(*PullPathRequest)(nil),               // 17: buckets.pb.PullPathRequest
	(*PullPathReply)(nil),                 // 18: buckets.pb.PullPathReply
	(*PullIpfsPathRequest)(nil),           // 19: buckets.pb.PullIpfsPathRequest
	(*PullIpfsPathReply)(nil),             // 20: buckets.pb.PullIpfsPathReply
	(*SetPathRequest)(nil),                // 21: buckets.pb.SetPathRequest
	(*SetPathReply)(nil),                  // 22: buckets.pb.SetPathReply
	(*RemoveRequest)(nil),                 // 23: buckets.pb.RemoveRequest
	(*RemoveReply)(nil),                   // 24: buckets.pb.RemoveReply
	(*RemovePathRequest)(nil),             // 25: buckets.pb.RemovePathRequest
	(*RemovePathReply)(nil),               // 26: buckets.pb.RemovePathReply
	(*ArchiveRequest)(nil),                // 27: buckets.pb.ArchiveRequest
	(*ArchiveReply)(nil),                  // 28: buckets.pb.ArchiveReply
	(*ArchiveStatusRequest)(nil),          // 29: buckets.pb.ArchiveStatusRequest
	(*ArchiveStatusReply)(nil),            // 30: buckets.pb.ArchiveStatusReply
	(*ArchiveInfoRequest)(nil),            // 31: buckets.pb.ArchiveInfoRequest
	(*ArchiveInfoReply)(nil),              // 32: buckets.pb.ArchiveInfoReply
	(*ArchiveWatchRequest)(nil),           // 33: buckets.pb.ArchiveWatchRequest
	(*ArchiveWatchReply)(nil),             // 34: buckets.pb.ArchiveWatchReply
	(*PushPathRequest_Header)(nil),        // 35: buckets.pb.PushPathRequest.Header
	(*PushPathReply_Event)(nil),           // 36: buckets.pb.PushPathReply.Event
	(*ArchiveInfoReply_Archive)(nil),      // 37: buckets.pb.ArchiveInfoReply.Archive
	(*ArchiveInfoReply_Archive_Deal)(nil), // 38: buckets.pb.ArchiveInfoReply.Archive.Deal
}
var file_buckets_proto_depIdxs = []int32{
	1,  // 0: buckets.pb.ListReply.roots:type_name -> buckets.pb.Root
	1,  // 1: buckets.pb.InitReply.root:type_name -> buckets.pb.Root
	9,  // 2: buckets.pb.InitReply.links:type_name -> buckets.pb.LinksReply
	1,  // 3: buckets.pb.RootReply.root:type_name -> buckets.pb.Root
	12, // 4: buckets.pb.ListPathReply.item:type_name -> buckets.pb.ListPathItem
	1,  // 5: buckets.pb.ListPathReply.root:type_name -> buckets.pb.Root
	12, // 6: buckets.pb.ListPathItem.items:type_name -> buckets.pb.ListPathItem
	12, // 7: buckets.pb.ListIpfsPathReply.item:type_name -> buckets.pb.ListPathItem
	35, // 8: buckets.pb.PushPathRequest.header:type_name -> buckets.pb.PushPathRequest.Header
	36, // 9: buckets.pb.PushPathReply.event:type_name -> buckets.pb.PushPathReply.Event
	1,  // 10: buckets.pb.RemovePathReply.root:type_name -> buckets.pb.Root
	0,  // 11: buckets.pb.ArchiveStatusReply.status:type_name -> buckets.pb.ArchiveStatusReply.Status
	37, // 12: buckets.pb.ArchiveInfoReply.archive:type_name -> buckets.pb.ArchiveInfoReply.Archive
	1,  // 13: buckets.pb.PushPathReply.Event.root:type_name -> buckets.pb.Root
	38, // 14: buckets.pb.ArchiveInfoReply.Archive.deals:type_name -> buckets.pb.ArchiveInfoReply.Archive.Deal
	2,  // 15: buckets.pb.API.List:input_type -> buckets.pb.ListRequest
	4,  // 16: buckets.pb.API.Init:input_type -> buckets.pb.InitRequest
	6,  // 17: buckets.pb.API.Root:input_type -> buckets.pb.RootRequest
	8,  // 18: buckets.pb.API.Links:input_type -> buckets.pb.LinksRequest
	10, // 19: buckets.pb.API.ListPath:input_type -> buckets.pb.ListPathRequest
	13, // 20: buckets.pb.API.ListIpfsPath:input_type -> buckets.pb.ListIpfsPathRequest
	15, // 21: buckets.pb.API.PushPath:input_type -> buckets.pb.PushPathRequest
	17, // 22: buckets.pb.API.PullPath:input_type -> buckets.pb.PullPathRequest
	19, // 23: buckets.pb.API.PullIpfsPath:input_type -> buckets.pb.PullIpfsPathRequest
	21, // 24: buckets.pb.API.SetPath:input_type -> buckets.pb.SetPathRequest
	23, // 25: buckets.pb.API.Remove:input_type -> buckets.pb.RemoveRequest
	25, // 26: buckets.pb.API.RemovePath:input_type -> buckets.pb.RemovePathRequest
	27, // 27: buckets.pb.API.Archive:input_type -> buckets.pb.ArchiveRequest
	29, // 28: buckets.pb.API.ArchiveStatus:input_type -> buckets.pb.ArchiveStatusRequest
	31, // 29: buckets.pb.API.ArchiveInfo:input_type -> buckets.pb.ArchiveInfoRequest
	33, // 30: buckets.pb.API.ArchiveWatch:input_type -> buckets.pb.ArchiveWatchRequest
	3,  // 31: buckets.pb.API.List:output_type -> buckets.pb.ListReply
	5,  // 32: buckets.pb.API.Init:output_type -> buckets.pb.InitReply
	7,  // 33: buckets.pb.API.Root:output_type -> buckets.pb.RootReply
	9,  // 34: buckets.pb.API.Links:output_type -> buckets.pb.LinksReply
	11, // 35: buckets.pb.API.ListPath:output_type -> buckets.pb.ListPathReply
	14, // 36: buckets.pb.API.ListIpfsPath:output_type -> buckets.pb.ListIpfsPathReply
	16, // 37: buckets.pb.API.PushPath:output_type -> buckets.pb.PushPathReply
	18, // 38: buckets.pb.API.PullPath:output_type -> buckets.pb.PullPathReply
	20, // 39: buckets.pb.API.PullIpfsPath:output_type -> buckets.pb.PullIpfsPathReply
	22, // 40: buckets.pb.API.SetPath:output_type -> buckets.pb.SetPathReply
	24, // 41: buckets.pb.API.Remove:output_type -> buckets.pb.RemoveReply
	26, // 42: buckets.pb.API.RemovePath:output_type -> buckets.pb.RemovePathReply
	28, // 43: buckets.pb.API.Archive:output_type -> buckets.pb.ArchiveReply
	30, // 44: buckets.pb.API.ArchiveStatus:output_type -> buckets.pb.ArchiveStatusReply
	32, // 45: buckets.pb.API.ArchiveInfo:output_type -> buckets.pb.ArchiveInfoReply
	34, // 46: buckets.pb.API.ArchiveWatch:output_type -> buckets.pb.ArchiveWatchReply
	31, // [31:47] is the sub-list for method output_type
	15, // [15:31] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_buckets_proto_init() }
func file_buckets_proto_init() {
	if File_buckets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_buckets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIpfsPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIpfsPathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushPathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullPathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullIpfsPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullIpfsPathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePathReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveWatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushPathRequest_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushPathReply_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveInfoReply_Archive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buckets_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveInfoReply_Archive_Deal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_buckets_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*PushPathRequest_Header_)(nil),
		(*PushPathRequest_Chunk)(nil),
	}
	file_buckets_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*PushPathReply_Event_)(nil),
		(*PushPathReply_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_buckets_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_buckets_proto_goTypes,
		DependencyIndexes: file_buckets_proto_depIdxs,
		EnumInfos:         file_buckets_proto_enumTypes,
		MessageInfos:      file_buckets_proto_msgTypes,
	}.Build()
	File_buckets_proto = out.File
	file_buckets_proto_rawDesc = nil
	file_buckets_proto_goTypes = nil
	file_buckets_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error)
	Root(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootReply, error)
	Links(ctx context.Context, in *LinksRequest, opts ...grpc.CallOption) (*LinksReply, error)
	ListPath(ctx context.Context, in *ListPathRequest, opts ...grpc.CallOption) (*ListPathReply, error)
	ListIpfsPath(ctx context.Context, in *ListIpfsPathRequest, opts ...grpc.CallOption) (*ListIpfsPathReply, error)
	PushPath(ctx context.Context, opts ...grpc.CallOption) (API_PushPathClient, error)
	PullPath(ctx context.Context, in *PullPathRequest, opts ...grpc.CallOption) (API_PullPathClient, error)
	PullIpfsPath(ctx context.Context, in *PullIpfsPathRequest, opts ...grpc.CallOption) (API_PullIpfsPathClient, error)
	SetPath(ctx context.Context, in *SetPathRequest, opts ...grpc.CallOption) (*SetPathReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
	RemovePath(ctx context.Context, in *RemovePathRequest, opts ...grpc.CallOption) (*RemovePathReply, error)
	// Archive
	Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveReply, error)
	ArchiveStatus(ctx context.Context, in *ArchiveStatusRequest, opts ...grpc.CallOption) (*ArchiveStatusReply, error)
	ArchiveInfo(ctx context.Context, in *ArchiveInfoRequest, opts ...grpc.CallOption) (*ArchiveInfoReply, error)
	ArchiveWatch(ctx context.Context, in *ArchiveWatchRequest, opts ...grpc.CallOption) (API_ArchiveWatchClient, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error) {
	out := new(InitReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Root(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootReply, error) {
	out := new(RootReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/Root", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Links(ctx context.Context, in *LinksRequest, opts ...grpc.CallOption) (*LinksReply, error) {
	out := new(LinksReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/Links", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPath(ctx context.Context, in *ListPathRequest, opts ...grpc.CallOption) (*ListPathReply, error) {
	out := new(ListPathReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/ListPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListIpfsPath(ctx context.Context, in *ListIpfsPathRequest, opts ...grpc.CallOption) (*ListIpfsPathReply, error) {
	out := new(ListIpfsPathReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/ListIpfsPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PushPath(ctx context.Context, opts ...grpc.CallOption) (API_PushPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/buckets.pb.API/PushPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPushPathClient{stream}
	return x, nil
}

type API_PushPathClient interface {
	Send(*PushPathRequest) error
	Recv() (*PushPathReply, error)
	grpc.ClientStream
}

type aPIPushPathClient struct {
	grpc.ClientStream
}

func (x *aPIPushPathClient) Send(m *PushPathRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPushPathClient) Recv() (*PushPathReply, error) {
	m := new(PushPathReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) PullPath(ctx context.Context, in *PullPathRequest, opts ...grpc.CallOption) (API_PullPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/buckets.pb.API/PullPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPullPathClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_PullPathClient interface {
	Recv() (*PullPathReply, error)
	grpc.ClientStream
}

type aPIPullPathClient struct {
	grpc.ClientStream
}

func (x *aPIPullPathClient) Recv() (*PullPathReply, error) {
	m := new(PullPathReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) PullIpfsPath(ctx context.Context, in *PullIpfsPathRequest, opts ...grpc.CallOption) (API_PullIpfsPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[2], "/buckets.pb.API/PullIpfsPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPullIpfsPathClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_PullIpfsPathClient interface {
	Recv() (*PullIpfsPathReply, error)
	grpc.ClientStream
}

type aPIPullIpfsPathClient struct {
	grpc.ClientStream
}

func (x *aPIPullIpfsPathClient) Recv() (*PullIpfsPathReply, error) {
	m := new(PullIpfsPathReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) SetPath(ctx context.Context, in *SetPathRequest, opts ...grpc.CallOption) (*SetPathReply, error) {
	out := new(SetPathReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/SetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RemovePath(ctx context.Context, in *RemovePathRequest, opts ...grpc.CallOption) (*RemovePathReply, error) {
	out := new(RemovePathReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/RemovePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveReply, error) {
	out := new(ArchiveReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ArchiveStatus(ctx context.Context, in *ArchiveStatusRequest, opts ...grpc.CallOption) (*ArchiveStatusReply, error) {
	out := new(ArchiveStatusReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/ArchiveStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ArchiveInfo(ctx context.Context, in *ArchiveInfoRequest, opts ...grpc.CallOption) (*ArchiveInfoReply, error) {
	out := new(ArchiveInfoReply)
	err := c.cc.Invoke(ctx, "/buckets.pb.API/ArchiveInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ArchiveWatch(ctx context.Context, in *ArchiveWatchRequest, opts ...grpc.CallOption) (API_ArchiveWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[3], "/buckets.pb.API/ArchiveWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIArchiveWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ArchiveWatchClient interface {
	Recv() (*ArchiveWatchReply, error)
	grpc.ClientStream
}

type aPIArchiveWatchClient struct {
	grpc.ClientStream
}

func (x *aPIArchiveWatchClient) Recv() (*ArchiveWatchReply, error) {
	m := new(ArchiveWatchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	List(context.Context, *ListRequest) (*ListReply, error)
	Init(context.Context, *InitRequest) (*InitReply, error)
	Root(context.Context, *RootRequest) (*RootReply, error)
	Links(context.Context, *LinksRequest) (*LinksReply, error)
	ListPath(context.Context, *ListPathRequest) (*ListPathReply, error)
	ListIpfsPath(context.Context, *ListIpfsPathRequest) (*ListIpfsPathReply, error)
	PushPath(API_PushPathServer) error
	PullPath(*PullPathRequest, API_PullPathServer) error
	PullIpfsPath(*PullIpfsPathRequest, API_PullIpfsPathServer) error
	SetPath(context.Context, *SetPathRequest) (*SetPathReply, error)
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
	RemovePath(context.Context, *RemovePathRequest) (*RemovePathReply, error)
	// Archive
	Archive(context.Context, *ArchiveRequest) (*ArchiveReply, error)
	ArchiveStatus(context.Context, *ArchiveStatusRequest) (*ArchiveStatusReply, error)
	ArchiveInfo(context.Context, *ArchiveInfoRequest) (*ArchiveInfoReply, error)
	ArchiveWatch(*ArchiveWatchRequest, API_ArchiveWatchServer) error
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedAPIServer) Init(context.Context, *InitRequest) (*InitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedAPIServer) Root(context.Context, *RootRequest) (*RootReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Root not implemented")
}
func (*UnimplementedAPIServer) Links(context.Context, *LinksRequest) (*LinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Links not implemented")
}
func (*UnimplementedAPIServer) ListPath(context.Context, *ListPathRequest) (*ListPathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPath not implemented")
}
func (*UnimplementedAPIServer) ListIpfsPath(context.Context, *ListIpfsPathRequest) (*ListIpfsPathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpfsPath not implemented")
}
func (*UnimplementedAPIServer) PushPath(API_PushPathServer) error {
	return status.Errorf(codes.Unimplemented, "method PushPath not implemented")
}
func (*UnimplementedAPIServer) PullPath(*PullPathRequest, API_PullPathServer) error {
	return status.Errorf(codes.Unimplemented, "method PullPath not implemented")
}
func (*UnimplementedAPIServer) PullIpfsPath(*PullIpfsPathRequest, API_PullIpfsPathServer) error {
	return status.Errorf(codes.Unimplemented, "method PullIpfsPath not implemented")
}
func (*UnimplementedAPIServer) SetPath(context.Context, *SetPathRequest) (*SetPathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPath not implemented")
}
func (*UnimplementedAPIServer) Remove(context.Context, *RemoveRequest) (*RemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedAPIServer) RemovePath(context.Context, *RemovePathRequest) (*RemovePathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePath not implemented")
}
func (*UnimplementedAPIServer) Archive(context.Context, *ArchiveRequest) (*ArchiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (*UnimplementedAPIServer) ArchiveStatus(context.Context, *ArchiveStatusRequest) (*ArchiveStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveStatus not implemented")
}
func (*UnimplementedAPIServer) ArchiveInfo(context.Context, *ArchiveInfoRequest) (*ArchiveInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveInfo not implemented")
}
func (*UnimplementedAPIServer) ArchiveWatch(*ArchiveWatchRequest, API_ArchiveWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ArchiveWatch not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Root_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Root(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/Root",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Root(ctx, req.(*RootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Links_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Links(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/Links",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Links(ctx, req.(*LinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/ListPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPath(ctx, req.(*ListPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListIpfsPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpfsPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListIpfsPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/ListIpfsPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListIpfsPath(ctx, req.(*ListIpfsPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PushPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).PushPath(&aPIPushPathServer{stream})
}

type API_PushPathServer interface {
	Send(*PushPathReply) error
	Recv() (*PushPathRequest, error)
	grpc.ServerStream
}

type aPIPushPathServer struct {
	grpc.ServerStream
}

func (x *aPIPushPathServer) Send(m *PushPathReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPushPathServer) Recv() (*PushPathRequest, error) {
	m := new(PushPathRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_PullPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).PullPath(m, &aPIPullPathServer{stream})
}

type API_PullPathServer interface {
	Send(*PullPathReply) error
	grpc.ServerStream
}

type aPIPullPathServer struct {
	grpc.ServerStream
}

func (x *aPIPullPathServer) Send(m *PullPathReply) error {
	return x.ServerStream.SendMsg(m)
}

func _API_PullIpfsPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullIpfsPathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).PullIpfsPath(m, &aPIPullIpfsPathServer{stream})
}

type API_PullIpfsPathServer interface {
	Send(*PullIpfsPathReply) error
	grpc.ServerStream
}

type aPIPullIpfsPathServer struct {
	grpc.ServerStream
}

func (x *aPIPullIpfsPathServer) Send(m *PullIpfsPathReply) error {
	return x.ServerStream.SendMsg(m)
}

func _API_SetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/SetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetPath(ctx, req.(*SetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RemovePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RemovePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/RemovePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RemovePath(ctx, req.(*RemovePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Archive(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ArchiveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ArchiveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/ArchiveStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ArchiveStatus(ctx, req.(*ArchiveStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ArchiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ArchiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buckets.pb.API/ArchiveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ArchiveInfo(ctx, req.(*ArchiveInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ArchiveWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArchiveWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ArchiveWatch(m, &aPIArchiveWatchServer{stream})
}

type API_ArchiveWatchServer interface {
	Send(*ArchiveWatchReply) error
	grpc.ServerStream
}

type aPIArchiveWatchServer struct {
	grpc.ServerStream
}

func (x *aPIArchiveWatchServer) Send(m *ArchiveWatchReply) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buckets.pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _API_List_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _API_Init_Handler,
		},
		{
			MethodName: "Root",
			Handler:    _API_Root_Handler,
		},
		{
			MethodName: "Links",
			Handler:    _API_Links_Handler,
		},
		{
			MethodName: "ListPath",
			Handler:    _API_ListPath_Handler,
		},
		{
			MethodName: "ListIpfsPath",
			Handler:    _API_ListIpfsPath_Handler,
		},
		{
			MethodName: "SetPath",
			Handler:    _API_SetPath_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _API_Remove_Handler,
		},
		{
			MethodName: "RemovePath",
			Handler:    _API_RemovePath_Handler,
		},
		{
			MethodName: "Archive",
			Handler:    _API_Archive_Handler,
		},
		{
			MethodName: "ArchiveStatus",
			Handler:    _API_ArchiveStatus_Handler,
		},
		{
			MethodName: "ArchiveInfo",
			Handler:    _API_ArchiveInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushPath",
			Handler:       _API_PushPath_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullPath",
			Handler:       _API_PullPath_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullIpfsPath",
			Handler:       _API_PullIpfsPath_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ArchiveWatch",
			Handler:       _API_ArchiveWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "buckets.proto",
}
